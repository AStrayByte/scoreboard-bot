#!python3
import unittest

from game_parsers.connections import parse_connections
from rich import print  # noqa: E402 F401


class TestConnections(unittest.TestCase):
    def test_connections_perfect(self):
        text = "Connections\nPuzzle #736\n游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릳\n游릴游릴游릴游릴"
        resp_string, resp_json = parse_connections(text, "testuser")
        self.assertEqual(
            resp_json,
            {
                "game_type": "connections",
                "game_number": "736",
                "score": 100,
                "username": "testuser",
            },
        )
        self.assertEqual(resp_string, "Connections Game #736 completed with score 100 @testuser.")

    def test_connections_scores(self):
        start = "Connections\nPuzzle #736\n"
        tests = [
            (f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릳\n游릴游릴游릴游릴", 100),
            (f"{start}游릱游릱游릱游릱\n游릵游릵游릵游릵\n游릳游릳游릳游릳\n游릴游릴游릴游릴", 90),
            (f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릳\n游릴游릴游릴游릳\n游릴游릴游릴游릴", 90),
            (f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릴\n游릴游릴游릴游릳\n游릳游릳游릳游릳\n游릴游릴游릴游릴", 80),
            (f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릴\n游릳游릳游릳游릴\n游릳游릳游릳游릴\n游릴游릴游릴游릳\n", 45),
            (f"{start}游릳游릳游릳游릴\n游릳游릳游릳游릴\n游릳游릳游릳游릴\n游릴游릴游릴游릳\n", 0),
        ]
        for test_text, expected_score in tests:
            resp_string, resp_json = parse_connections(test_text, "testuser")
            print(resp_json)
            print(resp_string)
            self.assertEqual(resp_json["score"], expected_score)

    def test_incomplete_scores(self):
        start = "Connections\nPuzzle #736\n"
        tests = [
            f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\n游릳游릳游릳游릳\n",
            f"{start}游릵游릵游릵游릵\n游릱游릱游릱游릱\ntest\n游릴游릴游릴游릳\n游릴游릴游릴游릴",
            f"{start}游릱游릱游릱游릱\n游릴游릴游릴游릳\n游릳游릳游릳游릳\n游릴游릴游릴游릴",
            f"{start}游릳游릳游릳游릴\n游릳游릳游릳游릴\n游릳游릳游릳游릴\n",
        ]
        for test_text in tests:
            resp_string, resp_json = parse_connections(test_text, "testuser")
            self.assertEqual(resp_json, {})
